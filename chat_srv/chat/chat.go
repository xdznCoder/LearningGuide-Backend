// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: chat.proto

package chat

import (
	"context"

	"LearningGuide/chat_srv/.ChatProto"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChatModelResponse = __ChatProto.ChatModelResponse
	CourseDocument    = __ChatProto.CourseDocument
	Empty             = __ChatProto.Empty
	UserMessage       = __ChatProto.UserMessage

	Chat interface {
		UploadDocument(ctx context.Context, in *CourseDocument, opts ...grpc.CallOption) (*Empty, error)
		SendSyncMessage(ctx context.Context, in *UserMessage, opts ...grpc.CallOption) (*ChatModelResponse, error)
		SendStreamMessage(ctx context.Context, in *UserMessage, opts ...grpc.CallOption) (__ChatProto.Chat_SendStreamMessageClient, error)
	}

	defaultChat struct {
		cli zrpc.Client
	}
)

func NewChat(cli zrpc.Client) Chat {
	return &defaultChat{
		cli: cli,
	}
}

func (m *defaultChat) UploadDocument(ctx context.Context, in *CourseDocument, opts ...grpc.CallOption) (*Empty, error) {
	client := __ChatProto.NewChatClient(m.cli.Conn())
	return client.UploadDocument(ctx, in, opts...)
}

func (m *defaultChat) SendSyncMessage(ctx context.Context, in *UserMessage, opts ...grpc.CallOption) (*ChatModelResponse, error) {
	client := __ChatProto.NewChatClient(m.cli.Conn())
	return client.SendSyncMessage(ctx, in, opts...)
}

func (m *defaultChat) SendStreamMessage(ctx context.Context, in *UserMessage, opts ...grpc.CallOption) (__ChatProto.Chat_SendStreamMessageClient, error) {
	client := __ChatProto.NewChatClient(m.cli.Conn())
	return client.SendStreamMessage(ctx, in, opts...)
}
