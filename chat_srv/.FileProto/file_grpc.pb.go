// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: file.proto

package __FileProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	File_CreateFile_FullMethodName        = "/file.file/CreateFile"
	File_GetFileDetail_FullMethodName     = "/file.file/GetFileDetail"
	File_FileList_FullMethodName          = "/file.file/FileList"
	File_UpdateFile_FullMethodName        = "/file.file/UpdateFile"
	File_DeleteFile_FullMethodName        = "/file.file/DeleteFile"
	File_CreateSession_FullMethodName     = "/file.file/CreateSession"
	File_SessionList_FullMethodName       = "/file.file/SessionList"
	File_DeleteSession_FullMethodName     = "/file.file/DeleteSession"
	File_NewMessage_FullMethodName        = "/file.file/NewMessage"
	File_MessageList_FullMethodName       = "/file.file/MessageList"
	File_NewNoun_FullMethodName           = "/file.file/NewNoun"
	File_NounList_FullMethodName          = "/file.file/NounList"
	File_GetNounDetail_FullMethodName     = "/file.file/GetNounDetail"
	File_DeleteNoun_FullMethodName        = "/file.file/DeleteNoun"
	File_NewExercise_FullMethodName       = "/file.file/NewExercise"
	File_UpdateExercise_FullMethodName    = "/file.file/UpdateExercise"
	File_ExerciseList_FullMethodName      = "/file.file/ExerciseList"
	File_GetExerciseDetail_FullMethodName = "/file.file/GetExerciseDetail"
	File_DeleteExercise_FullMethodName    = "/file.file/DeleteExercise"
	File_NewSummary_FullMethodName        = "/file.file/NewSummary"
	File_SummaryList_FullMethodName       = "/file.file/SummaryList"
	File_GetSummary_FullMethodName        = "/file.file/GetSummary"
)

// FileClient is the client API for File service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileClient interface {
	CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error)
	GetFileDetail(ctx context.Context, in *FileDetailRequest, opts ...grpc.CallOption) (*FileInfoResponse, error)
	FileList(ctx context.Context, in *FileFilterRequest, opts ...grpc.CallOption) (*FileListResponse, error)
	UpdateFile(ctx context.Context, in *UpdateFileRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*Empty, error)
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	SessionList(ctx context.Context, in *SessionListRequest, opts ...grpc.CallOption) (*SessionListResponse, error)
	DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*Empty, error)
	NewMessage(ctx context.Context, in *NewMessageRequest, opts ...grpc.CallOption) (*NewMessageResponse, error)
	MessageList(ctx context.Context, in *MessageListRequest, opts ...grpc.CallOption) (*MessageListResponse, error)
	NewNoun(ctx context.Context, in *NewNounRequest, opts ...grpc.CallOption) (*NewNounResponse, error)
	NounList(ctx context.Context, in *NounListRequest, opts ...grpc.CallOption) (*NounListResponse, error)
	GetNounDetail(ctx context.Context, in *NounDetailRequest, opts ...grpc.CallOption) (*NounInfoResponse, error)
	DeleteNoun(ctx context.Context, in *DeleteNounRequest, opts ...grpc.CallOption) (*Empty, error)
	NewExercise(ctx context.Context, in *NewExerciseRequest, opts ...grpc.CallOption) (*NewExerciseResponse, error)
	UpdateExercise(ctx context.Context, in *UpdateExerciseRequest, opts ...grpc.CallOption) (*Empty, error)
	ExerciseList(ctx context.Context, in *ExerciseListRequest, opts ...grpc.CallOption) (*ExerciseListResponse, error)
	GetExerciseDetail(ctx context.Context, in *ExerciseDetailRequest, opts ...grpc.CallOption) (*ExerciseInfoResponse, error)
	DeleteExercise(ctx context.Context, in *DeleteExerciseRequest, opts ...grpc.CallOption) (*Empty, error)
	NewSummary(ctx context.Context, in *NewSummaryRequest, opts ...grpc.CallOption) (*NewSummaryResponse, error)
	SummaryList(ctx context.Context, in *SummaryListRequest, opts ...grpc.CallOption) (*SummaryListResponse, error)
	GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*SummaryInfoResponse, error)
}

type fileClient struct {
	cc grpc.ClientConnInterface
}

func NewFileClient(cc grpc.ClientConnInterface) FileClient {
	return &fileClient{cc}
}

func (c *fileClient) CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFileResponse)
	err := c.cc.Invoke(ctx, File_CreateFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) GetFileDetail(ctx context.Context, in *FileDetailRequest, opts ...grpc.CallOption) (*FileInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileInfoResponse)
	err := c.cc.Invoke(ctx, File_GetFileDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) FileList(ctx context.Context, in *FileFilterRequest, opts ...grpc.CallOption) (*FileListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileListResponse)
	err := c.cc.Invoke(ctx, File_FileList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) UpdateFile(ctx context.Context, in *UpdateFileRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, File_UpdateFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, File_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, File_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) SessionList(ctx context.Context, in *SessionListRequest, opts ...grpc.CallOption) (*SessionListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionListResponse)
	err := c.cc.Invoke(ctx, File_SessionList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, File_DeleteSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) NewMessage(ctx context.Context, in *NewMessageRequest, opts ...grpc.CallOption) (*NewMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewMessageResponse)
	err := c.cc.Invoke(ctx, File_NewMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) MessageList(ctx context.Context, in *MessageListRequest, opts ...grpc.CallOption) (*MessageListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageListResponse)
	err := c.cc.Invoke(ctx, File_MessageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) NewNoun(ctx context.Context, in *NewNounRequest, opts ...grpc.CallOption) (*NewNounResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewNounResponse)
	err := c.cc.Invoke(ctx, File_NewNoun_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) NounList(ctx context.Context, in *NounListRequest, opts ...grpc.CallOption) (*NounListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NounListResponse)
	err := c.cc.Invoke(ctx, File_NounList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) GetNounDetail(ctx context.Context, in *NounDetailRequest, opts ...grpc.CallOption) (*NounInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NounInfoResponse)
	err := c.cc.Invoke(ctx, File_GetNounDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) DeleteNoun(ctx context.Context, in *DeleteNounRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, File_DeleteNoun_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) NewExercise(ctx context.Context, in *NewExerciseRequest, opts ...grpc.CallOption) (*NewExerciseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewExerciseResponse)
	err := c.cc.Invoke(ctx, File_NewExercise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) UpdateExercise(ctx context.Context, in *UpdateExerciseRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, File_UpdateExercise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) ExerciseList(ctx context.Context, in *ExerciseListRequest, opts ...grpc.CallOption) (*ExerciseListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExerciseListResponse)
	err := c.cc.Invoke(ctx, File_ExerciseList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) GetExerciseDetail(ctx context.Context, in *ExerciseDetailRequest, opts ...grpc.CallOption) (*ExerciseInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExerciseInfoResponse)
	err := c.cc.Invoke(ctx, File_GetExerciseDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) DeleteExercise(ctx context.Context, in *DeleteExerciseRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, File_DeleteExercise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) NewSummary(ctx context.Context, in *NewSummaryRequest, opts ...grpc.CallOption) (*NewSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewSummaryResponse)
	err := c.cc.Invoke(ctx, File_NewSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) SummaryList(ctx context.Context, in *SummaryListRequest, opts ...grpc.CallOption) (*SummaryListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummaryListResponse)
	err := c.cc.Invoke(ctx, File_SummaryList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*SummaryInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummaryInfoResponse)
	err := c.cc.Invoke(ctx, File_GetSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServer is the server API for File service.
// All implementations must embed UnimplementedFileServer
// for forward compatibility.
type FileServer interface {
	CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error)
	GetFileDetail(context.Context, *FileDetailRequest) (*FileInfoResponse, error)
	FileList(context.Context, *FileFilterRequest) (*FileListResponse, error)
	UpdateFile(context.Context, *UpdateFileRequest) (*Empty, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*Empty, error)
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	SessionList(context.Context, *SessionListRequest) (*SessionListResponse, error)
	DeleteSession(context.Context, *DeleteSessionRequest) (*Empty, error)
	NewMessage(context.Context, *NewMessageRequest) (*NewMessageResponse, error)
	MessageList(context.Context, *MessageListRequest) (*MessageListResponse, error)
	NewNoun(context.Context, *NewNounRequest) (*NewNounResponse, error)
	NounList(context.Context, *NounListRequest) (*NounListResponse, error)
	GetNounDetail(context.Context, *NounDetailRequest) (*NounInfoResponse, error)
	DeleteNoun(context.Context, *DeleteNounRequest) (*Empty, error)
	NewExercise(context.Context, *NewExerciseRequest) (*NewExerciseResponse, error)
	UpdateExercise(context.Context, *UpdateExerciseRequest) (*Empty, error)
	ExerciseList(context.Context, *ExerciseListRequest) (*ExerciseListResponse, error)
	GetExerciseDetail(context.Context, *ExerciseDetailRequest) (*ExerciseInfoResponse, error)
	DeleteExercise(context.Context, *DeleteExerciseRequest) (*Empty, error)
	NewSummary(context.Context, *NewSummaryRequest) (*NewSummaryResponse, error)
	SummaryList(context.Context, *SummaryListRequest) (*SummaryListResponse, error)
	GetSummary(context.Context, *GetSummaryRequest) (*SummaryInfoResponse, error)
	mustEmbedUnimplementedFileServer()
}

// UnimplementedFileServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileServer struct{}

func (UnimplementedFileServer) CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedFileServer) GetFileDetail(context.Context, *FileDetailRequest) (*FileInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileDetail not implemented")
}
func (UnimplementedFileServer) FileList(context.Context, *FileFilterRequest) (*FileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileList not implemented")
}
func (UnimplementedFileServer) UpdateFile(context.Context, *UpdateFileRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFile not implemented")
}
func (UnimplementedFileServer) DeleteFile(context.Context, *DeleteFileRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedFileServer) SessionList(context.Context, *SessionListRequest) (*SessionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionList not implemented")
}
func (UnimplementedFileServer) DeleteSession(context.Context, *DeleteSessionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedFileServer) NewMessage(context.Context, *NewMessageRequest) (*NewMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMessage not implemented")
}
func (UnimplementedFileServer) MessageList(context.Context, *MessageListRequest) (*MessageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageList not implemented")
}
func (UnimplementedFileServer) NewNoun(context.Context, *NewNounRequest) (*NewNounResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewNoun not implemented")
}
func (UnimplementedFileServer) NounList(context.Context, *NounListRequest) (*NounListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NounList not implemented")
}
func (UnimplementedFileServer) GetNounDetail(context.Context, *NounDetailRequest) (*NounInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNounDetail not implemented")
}
func (UnimplementedFileServer) DeleteNoun(context.Context, *DeleteNounRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNoun not implemented")
}
func (UnimplementedFileServer) NewExercise(context.Context, *NewExerciseRequest) (*NewExerciseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewExercise not implemented")
}
func (UnimplementedFileServer) UpdateExercise(context.Context, *UpdateExerciseRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExercise not implemented")
}
func (UnimplementedFileServer) ExerciseList(context.Context, *ExerciseListRequest) (*ExerciseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExerciseList not implemented")
}
func (UnimplementedFileServer) GetExerciseDetail(context.Context, *ExerciseDetailRequest) (*ExerciseInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExerciseDetail not implemented")
}
func (UnimplementedFileServer) DeleteExercise(context.Context, *DeleteExerciseRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExercise not implemented")
}
func (UnimplementedFileServer) NewSummary(context.Context, *NewSummaryRequest) (*NewSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSummary not implemented")
}
func (UnimplementedFileServer) SummaryList(context.Context, *SummaryListRequest) (*SummaryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SummaryList not implemented")
}
func (UnimplementedFileServer) GetSummary(context.Context, *GetSummaryRequest) (*SummaryInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummary not implemented")
}
func (UnimplementedFileServer) mustEmbedUnimplementedFileServer() {}
func (UnimplementedFileServer) testEmbeddedByValue()              {}

// UnsafeFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServer will
// result in compilation errors.
type UnsafeFileServer interface {
	mustEmbedUnimplementedFileServer()
}

func RegisterFileServer(s grpc.ServiceRegistrar, srv FileServer) {
	// If the following call pancis, it indicates UnimplementedFileServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&File_ServiceDesc, srv)
}

func _File_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_CreateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).CreateFile(ctx, req.(*CreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_GetFileDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).GetFileDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_GetFileDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).GetFileDetail(ctx, req.(*FileDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_FileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).FileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_FileList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).FileList(ctx, req.(*FileFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_UpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).UpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_UpdateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).UpdateFile(ctx, req.(*UpdateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_SessionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).SessionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_SessionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).SessionList(ctx, req.(*SessionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_DeleteSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).DeleteSession(ctx, req.(*DeleteSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_NewMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).NewMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_NewMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).NewMessage(ctx, req.(*NewMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_MessageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).MessageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_MessageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).MessageList(ctx, req.(*MessageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_NewNoun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewNounRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).NewNoun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_NewNoun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).NewNoun(ctx, req.(*NewNounRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_NounList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NounListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).NounList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_NounList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).NounList(ctx, req.(*NounListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_GetNounDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NounDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).GetNounDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_GetNounDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).GetNounDetail(ctx, req.(*NounDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_DeleteNoun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNounRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).DeleteNoun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_DeleteNoun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).DeleteNoun(ctx, req.(*DeleteNounRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_NewExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).NewExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_NewExercise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).NewExercise(ctx, req.(*NewExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_UpdateExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).UpdateExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_UpdateExercise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).UpdateExercise(ctx, req.(*UpdateExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_ExerciseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExerciseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).ExerciseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_ExerciseList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).ExerciseList(ctx, req.(*ExerciseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_GetExerciseDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExerciseDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).GetExerciseDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_GetExerciseDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).GetExerciseDetail(ctx, req.(*ExerciseDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_DeleteExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).DeleteExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_DeleteExercise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).DeleteExercise(ctx, req.(*DeleteExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_NewSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).NewSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_NewSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).NewSummary(ctx, req.(*NewSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_SummaryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummaryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).SummaryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_SummaryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).SummaryList(ctx, req.(*SummaryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_GetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).GetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_GetSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).GetSummary(ctx, req.(*GetSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// File_ServiceDesc is the grpc.ServiceDesc for File service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var File_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file.file",
	HandlerType: (*FileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFile",
			Handler:    _File_CreateFile_Handler,
		},
		{
			MethodName: "GetFileDetail",
			Handler:    _File_GetFileDetail_Handler,
		},
		{
			MethodName: "FileList",
			Handler:    _File_FileList_Handler,
		},
		{
			MethodName: "UpdateFile",
			Handler:    _File_UpdateFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _File_DeleteFile_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _File_CreateSession_Handler,
		},
		{
			MethodName: "SessionList",
			Handler:    _File_SessionList_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _File_DeleteSession_Handler,
		},
		{
			MethodName: "NewMessage",
			Handler:    _File_NewMessage_Handler,
		},
		{
			MethodName: "MessageList",
			Handler:    _File_MessageList_Handler,
		},
		{
			MethodName: "NewNoun",
			Handler:    _File_NewNoun_Handler,
		},
		{
			MethodName: "NounList",
			Handler:    _File_NounList_Handler,
		},
		{
			MethodName: "GetNounDetail",
			Handler:    _File_GetNounDetail_Handler,
		},
		{
			MethodName: "DeleteNoun",
			Handler:    _File_DeleteNoun_Handler,
		},
		{
			MethodName: "NewExercise",
			Handler:    _File_NewExercise_Handler,
		},
		{
			MethodName: "UpdateExercise",
			Handler:    _File_UpdateExercise_Handler,
		},
		{
			MethodName: "ExerciseList",
			Handler:    _File_ExerciseList_Handler,
		},
		{
			MethodName: "GetExerciseDetail",
			Handler:    _File_GetExerciseDetail_Handler,
		},
		{
			MethodName: "DeleteExercise",
			Handler:    _File_DeleteExercise_Handler,
		},
		{
			MethodName: "NewSummary",
			Handler:    _File_NewSummary_Handler,
		},
		{
			MethodName: "SummaryList",
			Handler:    _File_SummaryList_Handler,
		},
		{
			MethodName: "GetSummary",
			Handler:    _File_GetSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file.proto",
}
