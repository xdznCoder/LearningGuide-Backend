// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: user.proto

package server

import (
	"context"

	"LearningGuide/user_srv/internal/logic"
	"LearningGuide/user_srv/internal/svc"
	"LearningGuide/user_srv/userProto"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	userProto.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServer) GetUserList(ctx context.Context, in *userProto.PageInfo) (*userProto.UserListResponse, error) {
	l := logic.NewGetUserListLogic(ctx, s.svcCtx)
	return l.GetUserList(in)
}

func (s *UserServer) GetUserByEmail(ctx context.Context, in *userProto.EmailRequest) (*userProto.UserInfoResponse, error) {
	l := logic.NewGetUserByEmailLogic(ctx, s.svcCtx)
	return l.GetUserByEmail(in)
}

func (s *UserServer) GetUserById(ctx context.Context, in *userProto.IdRequest) (*userProto.UserInfoResponse, error) {
	l := logic.NewGetUserByIdLogic(ctx, s.svcCtx)
	return l.GetUserById(in)
}

func (s *UserServer) GetUsersByIds(ctx context.Context, in *userProto.IdsRequest) (*userProto.UserListResponse, error) {
	l := logic.NewGetUsersByIdsLogic(ctx, s.svcCtx)
	return l.GetUsersByIds(in)
}

func (s *UserServer) CreateUser(ctx context.Context, in *userProto.CreateUserInfo) (*userProto.UserInfoResponse, error) {
	l := logic.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

func (s *UserServer) UpdateUser(ctx context.Context, in *userProto.UpdateUserInfo) (*userProto.Empty, error) {
	l := logic.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

func (s *UserServer) CheckPasswordInfo(ctx context.Context, in *userProto.PasswordCheck) (*userProto.CheckResponse, error) {
	l := logic.NewCheckPasswordInfoLogic(ctx, s.svcCtx)
	return l.CheckPasswordInfo(in)
}

func (s *UserServer) DeleteUser(ctx context.Context, in *userProto.DeleteUserRequest) (*userProto.Empty, error) {
	l := logic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}

func (s *UserServer) ChangePassword(ctx context.Context, in *userProto.ChangePasswordRequest) (*userProto.Empty, error) {
	l := logic.NewChangePasswordLogic(ctx, s.svcCtx)
	return l.ChangePassword(in)
}
