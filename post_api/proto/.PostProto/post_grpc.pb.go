// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: post.proto

package __PostProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Post_NewPost_FullMethodName        = "/post.post/NewPost"
	Post_GetPost_FullMethodName        = "/post.post/GetPost"
	Post_PostList_FullMethodName       = "/post.post/PostList"
	Post_UpdatePost_FullMethodName     = "/post.post/UpdatePost"
	Post_DeletePost_FullMethodName     = "/post.post/DeletePost"
	Post_NewLike_FullMethodName        = "/post.post/NewLike"
	Post_PostListByLike_FullMethodName = "/post.post/PostListByLike"
	Post_DeleteLike_FullMethodName     = "/post.post/DeleteLike"
	Post_NewFav_FullMethodName         = "/post.post/NewFav"
	Post_PostListByFav_FullMethodName  = "/post.post/PostListByFav"
	Post_DeleteFav_FullMethodName      = "/post.post/DeleteFav"
	Post_NewComment_FullMethodName     = "/post.post/NewComment"
	Post_CommentList_FullMethodName    = "/post.post/CommentList"
	Post_DeleteComment_FullMethodName  = "/post.post/DeleteComment"
	Post_GetNoticeList_FullMethodName  = "/post.post/GetNoticeList"
	Post_CheckNotice_FullMethodName    = "/post.post/CheckNotice"
)

// PostClient is the client API for Post service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostClient interface {
	NewPost(ctx context.Context, in *NewPostRequest, opts ...grpc.CallOption) (*NewPostResponse, error)
	GetPost(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*PostInfoResponse, error)
	PostList(ctx context.Context, in *PostFilterRequest, opts ...grpc.CallOption) (*PostListResponse, error)
	UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*Empty, error)
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*Empty, error)
	NewLike(ctx context.Context, in *NewLikeRequest, opts ...grpc.CallOption) (*Empty, error)
	PostListByLike(ctx context.Context, in *LikeListRequest, opts ...grpc.CallOption) (*PostListResponse, error)
	DeleteLike(ctx context.Context, in *DeleteLikeRequest, opts ...grpc.CallOption) (*Empty, error)
	NewFav(ctx context.Context, in *NewFavRequest, opts ...grpc.CallOption) (*Empty, error)
	PostListByFav(ctx context.Context, in *FavListRequest, opts ...grpc.CallOption) (*PostListResponse, error)
	DeleteFav(ctx context.Context, in *DeleteFavRequest, opts ...grpc.CallOption) (*Empty, error)
	NewComment(ctx context.Context, in *NewCommentRequest, opts ...grpc.CallOption) (*NewCommentResponse, error)
	CommentList(ctx context.Context, in *CommentFilterRequest, opts ...grpc.CallOption) (*CommentListResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*Empty, error)
	GetNoticeList(ctx context.Context, in *NoticeFilterRequest, opts ...grpc.CallOption) (*NoticeListResponse, error)
	CheckNotice(ctx context.Context, in *CheckNoticeRequest, opts ...grpc.CallOption) (*CheckNoticeResponse, error)
}

type postClient struct {
	cc grpc.ClientConnInterface
}

func NewPostClient(cc grpc.ClientConnInterface) PostClient {
	return &postClient{cc}
}

func (c *postClient) NewPost(ctx context.Context, in *NewPostRequest, opts ...grpc.CallOption) (*NewPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewPostResponse)
	err := c.cc.Invoke(ctx, Post_NewPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) GetPost(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*PostInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostInfoResponse)
	err := c.cc.Invoke(ctx, Post_GetPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) PostList(ctx context.Context, in *PostFilterRequest, opts ...grpc.CallOption) (*PostListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostListResponse)
	err := c.cc.Invoke(ctx, Post_PostList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Post_UpdatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Post_DeletePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) NewLike(ctx context.Context, in *NewLikeRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Post_NewLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) PostListByLike(ctx context.Context, in *LikeListRequest, opts ...grpc.CallOption) (*PostListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostListResponse)
	err := c.cc.Invoke(ctx, Post_PostListByLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) DeleteLike(ctx context.Context, in *DeleteLikeRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Post_DeleteLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) NewFav(ctx context.Context, in *NewFavRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Post_NewFav_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) PostListByFav(ctx context.Context, in *FavListRequest, opts ...grpc.CallOption) (*PostListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostListResponse)
	err := c.cc.Invoke(ctx, Post_PostListByFav_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) DeleteFav(ctx context.Context, in *DeleteFavRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Post_DeleteFav_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) NewComment(ctx context.Context, in *NewCommentRequest, opts ...grpc.CallOption) (*NewCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewCommentResponse)
	err := c.cc.Invoke(ctx, Post_NewComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) CommentList(ctx context.Context, in *CommentFilterRequest, opts ...grpc.CallOption) (*CommentListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentListResponse)
	err := c.cc.Invoke(ctx, Post_CommentList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Post_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) GetNoticeList(ctx context.Context, in *NoticeFilterRequest, opts ...grpc.CallOption) (*NoticeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NoticeListResponse)
	err := c.cc.Invoke(ctx, Post_GetNoticeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) CheckNotice(ctx context.Context, in *CheckNoticeRequest, opts ...grpc.CallOption) (*CheckNoticeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckNoticeResponse)
	err := c.cc.Invoke(ctx, Post_CheckNotice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServer is the server API for Post service.
// All implementations must embed UnimplementedPostServer
// for forward compatibility.
type PostServer interface {
	NewPost(context.Context, *NewPostRequest) (*NewPostResponse, error)
	GetPost(context.Context, *PostID) (*PostInfoResponse, error)
	PostList(context.Context, *PostFilterRequest) (*PostListResponse, error)
	UpdatePost(context.Context, *UpdatePostRequest) (*Empty, error)
	DeletePost(context.Context, *DeletePostRequest) (*Empty, error)
	NewLike(context.Context, *NewLikeRequest) (*Empty, error)
	PostListByLike(context.Context, *LikeListRequest) (*PostListResponse, error)
	DeleteLike(context.Context, *DeleteLikeRequest) (*Empty, error)
	NewFav(context.Context, *NewFavRequest) (*Empty, error)
	PostListByFav(context.Context, *FavListRequest) (*PostListResponse, error)
	DeleteFav(context.Context, *DeleteFavRequest) (*Empty, error)
	NewComment(context.Context, *NewCommentRequest) (*NewCommentResponse, error)
	CommentList(context.Context, *CommentFilterRequest) (*CommentListResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*Empty, error)
	GetNoticeList(context.Context, *NoticeFilterRequest) (*NoticeListResponse, error)
	CheckNotice(context.Context, *CheckNoticeRequest) (*CheckNoticeResponse, error)
	mustEmbedUnimplementedPostServer()
}

// UnimplementedPostServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPostServer struct{}

func (UnimplementedPostServer) NewPost(context.Context, *NewPostRequest) (*NewPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPost not implemented")
}
func (UnimplementedPostServer) GetPost(context.Context, *PostID) (*PostInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedPostServer) PostList(context.Context, *PostFilterRequest) (*PostListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostList not implemented")
}
func (UnimplementedPostServer) UpdatePost(context.Context, *UpdatePostRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedPostServer) DeletePost(context.Context, *DeletePostRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedPostServer) NewLike(context.Context, *NewLikeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewLike not implemented")
}
func (UnimplementedPostServer) PostListByLike(context.Context, *LikeListRequest) (*PostListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostListByLike not implemented")
}
func (UnimplementedPostServer) DeleteLike(context.Context, *DeleteLikeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLike not implemented")
}
func (UnimplementedPostServer) NewFav(context.Context, *NewFavRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewFav not implemented")
}
func (UnimplementedPostServer) PostListByFav(context.Context, *FavListRequest) (*PostListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostListByFav not implemented")
}
func (UnimplementedPostServer) DeleteFav(context.Context, *DeleteFavRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFav not implemented")
}
func (UnimplementedPostServer) NewComment(context.Context, *NewCommentRequest) (*NewCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewComment not implemented")
}
func (UnimplementedPostServer) CommentList(context.Context, *CommentFilterRequest) (*CommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentList not implemented")
}
func (UnimplementedPostServer) DeleteComment(context.Context, *DeleteCommentRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedPostServer) GetNoticeList(context.Context, *NoticeFilterRequest) (*NoticeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoticeList not implemented")
}
func (UnimplementedPostServer) CheckNotice(context.Context, *CheckNoticeRequest) (*CheckNoticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNotice not implemented")
}
func (UnimplementedPostServer) mustEmbedUnimplementedPostServer() {}
func (UnimplementedPostServer) testEmbeddedByValue()              {}

// UnsafePostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServer will
// result in compilation errors.
type UnsafePostServer interface {
	mustEmbedUnimplementedPostServer()
}

func RegisterPostServer(s grpc.ServiceRegistrar, srv PostServer) {
	// If the following call pancis, it indicates UnimplementedPostServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Post_ServiceDesc, srv)
}

func _Post_NewPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).NewPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_NewPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).NewPost(ctx, req.(*NewPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_GetPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).GetPost(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_PostList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).PostList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_PostList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).PostList(ctx, req.(*PostFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_UpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).UpdatePost(ctx, req.(*UpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_NewLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).NewLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_NewLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).NewLike(ctx, req.(*NewLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_PostListByLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).PostListByLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_PostListByLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).PostListByLike(ctx, req.(*LikeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_DeleteLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).DeleteLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_DeleteLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).DeleteLike(ctx, req.(*DeleteLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_NewFav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFavRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).NewFav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_NewFav_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).NewFav(ctx, req.(*NewFavRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_PostListByFav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).PostListByFav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_PostListByFav_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).PostListByFav(ctx, req.(*FavListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_DeleteFav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFavRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).DeleteFav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_DeleteFav_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).DeleteFav(ctx, req.(*DeleteFavRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_NewComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).NewComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_NewComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).NewComment(ctx, req.(*NewCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_CommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).CommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_CommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).CommentList(ctx, req.(*CommentFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_GetNoticeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).GetNoticeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_GetNoticeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).GetNoticeList(ctx, req.(*NoticeFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_CheckNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).CheckNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_CheckNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).CheckNotice(ctx, req.(*CheckNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Post_ServiceDesc is the grpc.ServiceDesc for Post service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Post_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "post.post",
	HandlerType: (*PostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewPost",
			Handler:    _Post_NewPost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _Post_GetPost_Handler,
		},
		{
			MethodName: "PostList",
			Handler:    _Post_PostList_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _Post_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _Post_DeletePost_Handler,
		},
		{
			MethodName: "NewLike",
			Handler:    _Post_NewLike_Handler,
		},
		{
			MethodName: "PostListByLike",
			Handler:    _Post_PostListByLike_Handler,
		},
		{
			MethodName: "DeleteLike",
			Handler:    _Post_DeleteLike_Handler,
		},
		{
			MethodName: "NewFav",
			Handler:    _Post_NewFav_Handler,
		},
		{
			MethodName: "PostListByFav",
			Handler:    _Post_PostListByFav_Handler,
		},
		{
			MethodName: "DeleteFav",
			Handler:    _Post_DeleteFav_Handler,
		},
		{
			MethodName: "NewComment",
			Handler:    _Post_NewComment_Handler,
		},
		{
			MethodName: "CommentList",
			Handler:    _Post_CommentList_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _Post_DeleteComment_Handler,
		},
		{
			MethodName: "GetNoticeList",
			Handler:    _Post_GetNoticeList_Handler,
		},
		{
			MethodName: "CheckNotice",
			Handler:    _Post_CheckNotice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post.proto",
}
